###########################
#   KRATGO CONFIGURATION
###########################

# IMPORTANT: Be careful with the tabulation indentation

# --- Variables ---

# $(version) : kratgo version
# $(method) : request method
# $(host) : request host
# $(path) : request path
# $(contentType) : response backend's content type
# $(statusCode) : response backend's status code
# $(req.header::<NAME>) : request header name
# $(resp.header::<NAME>) : response header name
# $(cookie::<NAME>) : request cookie name

# --- Operators ---

# Modifiers: + - / * & | ^ ** % >> <<
# Comparators: > >= < <= == != =~ !~
# Logical ops: || &&
# Numeric constants, as 64-bit floating point (12345.678)
# String constants (single quotes: 'foobar')
# Date constants (single quotes, using any permutation of RFC3339, ISO8601, ruby date, or unix date; date parsing is automatically tried with any string constant)
# Boolean constants: true false
# Parenthesis to control order of evaluation ( )
# Arrays (anything separated by , within parenthesis: (1, 2, 'foo'))
# Prefixes: ! - ~
# Ternary conditional: ? :
# Null coalescence: ??

# --- Log ---
# Log level: fatal | error | warning | info | debug
# Log output:
#   - console: Write output in standard error
#   - <file path>: Write output in log file

logLevel: info
logOutput: /var/log/kratgo/kratgo.log

# --- Cache ---
# ttl: Cache expiration in minutes
# cleanFrequency: Interval in minutes between removing expired entries (clean up)
# maxEntries: Max number of entries in cache. Used only to calculate initial size for cache
# maxEntrySize: Max size of entry in bytes
# hardMaxCacheSize: Limit for cache size in MB (Default value is 0 which means unlimited size)

cache:
  ttl: 10
  cleanFrequency: 1
  maxEntries: 600000
  maxEntrySize: 500
  hardMaxCacheSize: 0

# --- Invalidator ---
# addr: IP and Port of invalidation api
# maxWorkers: Maximum workers to execute invalidations

invalidator:
  addr: 0.0.0.0:6082
  maxWorkers: 5

# --- Proxy ---
# addr: IP and Port of Kratgo
# backendsAddrs: Array with "addr:port" of the backends
# response: Configuration to manipulate reponse (Optional)
#   headers:
#     set: Configuration to SET headers from response (Optional)
#       - name: Header name
#         value: Value of header
#         if: Condition to set this header (Optional)
#
#     unset: Configuration to UNSET headers from response (Optional)
#       - name: Header name
#         if: Condition to unset this header (Optional)
#
# nocache: Conditions to not save in cache the backend response (Optional)

proxy:
  addr: 0.0.0.0:6081
  backendsAddrs: [<addr1>:<port1>, ...]
  response:
    headers:
      set:
        - name: X-Kratgo
          value: $(version)

      unset:
        - name: Set-Cookie
          if: $(req.header::X-Requested-With) != 'XMLHttpRequest'

  nocache:
    - $(req.header::X-Requested-With) == 'XMLHttpRequest'
